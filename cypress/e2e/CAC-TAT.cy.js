//‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste de validar t√≠tulo ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

//üë®‚Äçüè´ O bloco "describe" define a su√≠te de testes e o bloco "it" define o caso de teste.
describe('Central de Atendimento ao Cliente TAT', () => {

  beforeEach(() => {
    cy.visit('./src/index.html')
  })

  it('verifica o t√≠tulo da aplica√ß√£o', () => {

    cy.title().should('be.equal', 'Central de Atendimento ao Cliente TAT') //A assertion "should('be.equal', 'O T√çTULO ESPERADO')"" √© usada para comparar o valor retornado por "cy.title()"" com a string exata que voc√™ espera.
  })

  //‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Testes de preenchimento de formul√°rio ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('preencher os campos corretamente', () => {

    // ‚ú¶ Preencher o campo nome ‚ú¶ //
    cy.get('input[name="firstName"]')
      .as('nome')
      .should('be.visible')
      .type('Michelle')
    cy.get('@nome')
      .should('have.value', 'Michelle')

    // ‚ú¶ Preencher o campo sobrenome ‚ú¶ //
    cy.get('input[name="lastName"]')
      .as('sobrenome')
      .should('be.visible')
      .type('Santos!')
    cy.get('@sobrenome')
      .should('have.value', 'Santos!')

    // ‚ú¶ Preencher o campo email ‚ú¶ //
    cy.get('#email')
      .as('email')
      .should('be.visible')
      .type('michelle@teste.com')
    cy.get('@email')
      .should('have.value', 'michelle@teste.com')

    // ‚ú¶ Selecionar o produto "Blog" da lista de sele√ß√£o ‚ú¶ //
    cy.get('#product')
      .select('blog')
      .should('have.value', 'blog')

    // ‚ú¶ "Checkar" o tipo de atendimento "Elogio" ‚ú¶ //

    //üí° Nota: O comando .check() √© o preferido para checkboxes e radios, pois simula o comportamento real do usu√°rio e garante que os eventos corretos de mudan√ßa de estado sejam disparados, sem a necessidade de cy.contains('button', 'Enviar').click() //Para selecionar a partir do nome que se .

    // ü§ñ Localiza o elemento de input (radio button) que tem o valor 'elogio'
    cy.get('input[type="radio"][value="elogio"]') // Usando seletor CSS para encontrar o radio button com valor 'elogio'. Veja que estou usando aspas simples por fora e aspas duplas por dentro. Quando utilizar aspas simples por fora, dentro do seletor CSS, as aspas devem ser duplas. E quando utilizar aspas duplas por fora, dentro do seletor CSS, as aspas devem ser simples.
      // 1. Usa o comando .check() para marcar/selecionar o radio button encontrado
      .check()
      // ü§ñ 2. Asser√ß√£o principal: Verifica se o elemento Elogio est√° marcado (confirma que o .check() funcionou)
      .should('be.checked')

    // ‚ú¶ "Checkar" o meio de contato "E-mail" ‚ú¶ //

    // ü§ñ (confirma que o .check() funcionou)Localiza o elemento de input (checkbox) que tem o valor 'email'
    cy.get('input[type="checkbox"][value="email"]')
      // ü§ñ  1. Usa o comando .check() para marcar/selecionar o checkbox
      .check()
      // ü§ñ 2. Asser√ß√£o principal: Verifica se o elemento AGORA est√° marcado
      .should('be.checked')
      // ü§ñ 3. Asser√ß√£o secund√°ria (opcional): Confirma que o atributo 'value' √© 'email'(garante que a sele√ß√£o foi feita no campo correto)
      .and('have.value', 'email')

    // ‚ú¶ Preencher o campo "Mensagem" ‚ú¶ //

    const longText = 'Teste de preenchimento do campo mensagem com um texto bem grande para verificar se o campo suporta textos longos. '.repeat(6); // Vari√°vel para armazenar um texto longo

    cy.get('textarea[name="open-text-area"]')
      .as('mensagem')
      .should('be.visible')
      //üí° Nota: O par√¢metro { delay: 0 } √© usado para eliminar o atraso padr√£o entre cada caractere digitado, acelerando o processo de digita√ß√£o no campo de texto.
      .type(longText, { delay: 0 }) // Usando a vari√°vel longText para preencher o campo
    cy.get('@mensagem')
      .should('have.value', longText)

    // ‚ú¶ Clicar no bot√£o "Enviar" ‚ú¶ //
    cy.get('button[type="submit"]')
      .as('botaoEnviar')
      .should('be.visible')
    cy.contains('button', 'Enviar').click() // Outra forma de clicar no bot√£o Enviar usando cy.contains()
    // ‚òÖ‚òÖ‚òÖ‚òÖ Antes do cy.contains, est√°vamos usando o comando cy.get('button[type="submit"]').click() para clicar no bot√£o Enviar. No entanto, ao usar cy.contains('button', 'Enviar').click(), garantimos que estamos clicando especificamente no bot√£o que cont√©m o texto "Enviar". Isso √© especialmente √∫til quando h√° mais de um bot√£o na p√°gina ou, quando o seletor √© complexo ou, quando n√£o se tem um ID ou classe espec√≠fica para o bot√£o. ‚òÖ‚òÖ‚òÖ‚òÖ //

    // ‚ú¶ Verificar se a mensagem de sucesso √© exibida ‚ú¶ //
    cy.get('.success')
      .should('be.visible')
      //üí° Nota: A asser√ß√£o .and('contain', 'Mensagem enviada com sucesso.') verifica se o elemento cont√©m o texto espec√≠fico, garantindo que a mensagem correta seja exibida.
      .and('contain', 'Mensagem enviada com sucesso.')

  })

  //‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste de formata√ß√£o inv√°lida -> E-mail ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //
  it('preencher o campo e-mail com formata√ß√£o inv√°lida', () => {

    // ‚ú¶ Preencher o campo nome ‚ú¶ //
    cy.get('input[name="firstName"]')
      .as('nome')
      .should('be.visible')
      .type('Michelle')
    cy.get('@nome')
      .should('have.value', 'Michelle')

    // ‚ú¶ Preencher o campo sobrenome ‚ú¶ //
    cy.get('input[name="lastName"]')
      .as('sobrenome')
      .should('be.visible')
      .type('Santos!')
    cy.get('@sobrenome')
      .should('have.value', 'Santos!')

    // ‚ú¶ Preencher o campo email com formata√ß√£o inv√°lida ‚ú¶ //
    cy.get('#email')
      .as('email')
      .should('be.visible')
      .type('michelle.teste@com')
    cy.get('@email')
      .should('have.value', 'michelle.teste@com')

    // ‚ú¶ Selecionar o produto "Blog" da lista de sele√ß√£o ‚ú¶ //
    cy.get('#product')
      .select('blog')
      .should('have.value', 'blog')
    cy.get('input[type="radio"][value="elogio"]')
      .check()
      .should('be.checked')

    // ‚ú¶ "Checkar" o meio de contato "E-mail" ‚ú¶ //
    cy.get('input[type="checkbox"][value="email"]')
      .check()
      .should('be.checked')
      .and('have.value', 'email')

    // ‚ú¶ Preencher o campo "Mensagem" ‚ú¶ //
    cy.get('textarea[name="open-text-area"]')
      .as('mensagem')
      .should('be.visible')
      .type('Sempre atenderam muito bem minhas solicita√ß√µes. Teste de preenchimento do campo mensagem', { delay: 0 })
    cy.get('@mensagem')
      .should('have.value', 'Sempre atenderam muito bem minhas solicita√ß√µes. Teste de preenchimento do campo mensagem')

    // ‚ú¶ Clicar no bot√£o "Enviar" ‚ú¶ //
    cy.get('button[type="submit"]')
      .as('botaoEnviar')
      .should('be.visible')
    cy.contains('button', 'Enviar').click() // Outra forma de clicar no bot√£o Enviar usando cy.contains()
    // ‚ú¶ Verificar se a mensagem de erro √© exibida ‚ú¶ //
    cy.get('.error')
      .should('be.visible')
      .and('contain', 'Valide os campos obrigat√≥rios!')

  })

  //‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste de preenchimento do campo telefone - Obrigat√≥rio ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //
  it('selecionar checkbox "Telefone" e n√£o preencher o campo que deve se tornar obrigat√≥rio', () => {

    // ‚ú¶ Preencher o campo nome ‚ú¶ //
    cy.get('input[name="firstName"]')
      .as('nome')
      .should('be.visible')
      .type('Michelle')
    cy.get('@nome')
      .should('have.value', 'Michelle')

    // ‚ú¶ Preencher o campo sobrenome ‚ú¶ //
    cy.get('input[name="lastName"]')
      .as('sobrenome')
      .should('be.visible')
      .type('Santos!')
    cy.get('@sobrenome')
      .should('have.value', 'Santos!')

    // ‚ú¶ Preencher o campo email ‚ú¶ //
    cy.get('#email')
      .as('email')
      .should('be.visible')
      .type('michelle.teste@com')
    cy.get('@email')
      .should('have.value', 'michelle.teste@com')

    // ‚ú¶ Selecionar o produto "Blog" da lista de sele√ß√£o ‚ú¶ //
    cy.get('#product')
      .select('blog')
      .should('have.value', 'blog')
    cy.get('input[type="radio"][value="elogio"]')
      .check()
      .should('be.checked')

    // ‚ú¶ "Checkar" o meio de contato "Telefone" ‚ú¶ //
    cy.get('input[type="checkbox"][value="phone"]')
      .check()
      .should('be.checked')
      .and('have.value', 'phone')

    // ‚ú¶ Preencher o campo "Mensagem" ‚ú¶ //
    cy.get('textarea[name="open-text-area"]')
      .as('mensagem')
      .should('be.visible')
      .type('Sempre atenderam muito bem minhas solicita√ß√µes. Teste de preenchimento do campo mensagem', { delay: 0 })
    cy.get('@mensagem')
      .should('have.value', 'Sempre atenderam muito bem minhas solicita√ß√µes. Teste de preenchimento do campo mensagem')

    // ‚ú¶ Clicar no bot√£o "Enviar" ‚ú¶ //
    cy.get('button[type="submit"]')
      .as('botaoEnviar')
      .should('be.visible')
    cy.contains('button', 'Enviar').click() // Outra forma de clicar no bot√£o Enviar usando cy.contains()

    // ‚ú¶ Verificar se a mensagem de erro √© exibida - telefone obrigat√≥rio‚ú¶ //
    cy.get('.error')
      .should('be.visible')
      .and('contain', 'Valide os campos obrigat√≥rios!')

  })

  //‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste de preenchimento do campo telefone - Valor n√£o num√©rico ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //
  it('preencher o campo "Telefone" com valores inv√°lidos', () => {

    // ‚ú¶ Preencher o campo telefone com valores n√£o num√©ricos ‚ú¶ // 
    cy.get('#phone')
      .as('telefone')
      .should('be.visible')
      .type('abcdefghij')
    cy.get('@telefone')
      .should('have.value', '')

  })


  //‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste valida√ß√£o label de campo obrigat√≥rio - Campo Telefone ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('Validar label "Obrigat√≥rio" quando o checkbox telefone for selecionado', () => {

    // ‚ú¶ Preencher o campo nome ‚ú¶ //
    cy.get('input[name="firstName"]')
      .as('nome')
      .should('be.visible')
      .type('Michelle')
    cy.get('@nome')
      .should('have.value', 'Michelle')

    // ‚ú¶ Preencher o campo sobrenome ‚ú¶ //
    cy.get('input[name="lastName"]')
      .as('sobrenome')
      .should('be.visible')
      .type('Santos!')
    cy.get('@sobrenome')
      .should('have.value', 'Santos!')

    // ‚ú¶ Preencher o campo email ‚ú¶ //
    cy.get('#email')
      .as('email')
      .should('be.visible')
      .type('michelle.teste@com')
    cy.get('@email')
      .should('have.value', 'michelle.teste@com')

    // ‚ú¶ Selecionar o produto "Blog" da lista de sele√ß√£o ‚ú¶ //
    cy.get('#product')
      .select('blog')
      .should('have.value', 'blog')
    cy.get('input[type="radio"][value="elogio"]')
      .check()
      .should('be.checked')

    // ‚ú¶ "Checkar" o meio de contato "Telefone" ‚ú¶ //
    cy.get('input[type="checkbox"][value="phone"]')
      .check()
      .should('be.checked')
      .and('have.value', 'phone')

    // ‚ú¶ O label "Telefone (Obrigat√≥rio)" deve estar vis√≠vel ‚ú¶ //
    cy.get('label[for="phone"]')
      .should('be.visible')
      .and('contain', 'Telefone (obrigat√≥rio)')

  })

  //‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste sem preencher campo obrigat√≥rio - Nome ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('N√£o preencher campo nome - Campo Obrigat√≥rio', () => {

    // ‚ú¶ Preencher o campo nome para depois apagar ‚ú¶ //
    cy.get('input[name="firstName"]')
      .as('nome')
      .should('be.visible')
      .type('Michelle')
    cy.get('@nome')
      .should('have.value', 'Michelle')
      // ‚ú¶ Apagar o conte√∫do do campo nome ‚ú¶ //
      .clear()
    cy.get('@nome')
      .should('have.value', '')

    // ‚ú¶ Preencher o campo sobrenome ‚ú¶ //
    cy.get('input[name="lastName"]')
      .as('sobrenome')
      .should('be.visible')
      .type('Santos!')
    cy.get('@sobrenome')
      .should('have.value', 'Santos!')

    // ‚ú¶ Preencher o campo email com formata√ß√£o inv√°lida ‚ú¶ //
    cy.get('#email')
      .as('email')
      .should('be.visible')
      .type('michelle.teste@com')
    cy.get('@email')
      .should('have.value', 'michelle.teste@com')

    // ‚ú¶ Selecionar o produto "Blog" da lista de sele√ß√£o ‚ú¶ //
    cy.get('#product')
      .select('blog')
      .should('have.value', 'blog')
    cy.get('input[type="radio"][value="elogio"]')
      .check()
      .should('be.checked')

    // ‚ú¶ "Checkar" o meio de contato "E-mail" ‚ú¶ //
    cy.get('input[type="checkbox"][value="email"]')
      .check()
      .should('be.checked')
      .and('have.value', 'email')

    // ‚ú¶ Preencher o campo "Mensagem" ‚ú¶ //
    cy.get('textarea[name="open-text-area"]')
      .as('mensagem')
      .should('be.visible')
      .type('Sempre atenderam muito bem minhas solicita√ß√µes. Teste de preenchimento do campo mensagem', { delay: 0 })
    cy.get('@mensagem')
      .should('have.value', 'Sempre atenderam muito bem minhas solicita√ß√µes. Teste de preenchimento do campo mensagem')

    // ‚ú¶ Clicar no bot√£o "Enviar" ‚ú¶ //
    cy.get('button[type="submit"]')
      .as('botaoEnviar')
      .should('be.visible')
    cy.contains('button', 'Enviar').click() // Outra forma de clicar no bot√£o Enviar usando cy.contains()

    // ‚ú¶ Verificar se a mensagem de erro √© exibida ‚ú¶ //
    cy.get('.error')
      .should('be.visible')
      .and('contain', 'Valide os campos obrigat√≥rios!')

  })

  //‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste sem preencher campo obrigat√≥rio - Sobrenome ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('N√£o preencher campo sobrenome - Campo Obrigat√≥rio', () => {

    // ‚ú¶ Preencher o campo "Nome" ‚ú¶ //
    cy.get('input[name="firstName"]')
      .as('nome')
      .should('be.visible')
      .type('Michelle')
    cy.get('@nome')
      .should('have.value', 'Michelle')

    // ‚ú¶ Preencher o campo sobrenome para depois apagar ‚ú¶ //
    cy.get('input[name="lastName"]')
      .as('sobrenome')
      .should('be.visible')
      .type('Monteiro')
    cy.get('@sobrenome')
      .should('have.value', 'Monteiro')

    // ‚ú¶ Apagar o conte√∫do do campo sobrenome ‚ú¶ //
    cy.get('@sobrenome')
      .clear()
    cy.get('@sobrenome')
      .should('have.value', '')

    // ‚ú¶ Preencher o campo email com formata√ß√£o inv√°lida ‚ú¶ //
    cy.get('#email')
      .as('email')
      .should('be.visible')
      .type('michelle.teste@com')
    cy.get('@email')
      .should('have.value', 'michelle.teste@com')

    // ‚ú¶ Selecionar o produto "Blog" da lista de sele√ß√£o ‚ú¶ //
    cy.get('#product')
      .select('blog')
      .should('have.value', 'blog')
    cy.get('input[type="radio"][value="elogio"]')
      .check()
      .should('be.checked')

    // ‚ú¶ "Checkar" o meio de contato "E-mail" ‚ú¶ //
    cy.get('input[type="checkbox"][value="email"]')
      .check()
      .should('be.checked')
      .and('have.value', 'email')

    // ‚ú¶ Preencher o campo "Mensagem" ‚ú¶ //
    cy.get('textarea[name="open-text-area"]')
      .as('mensagem')
      .should('be.visible')
      .type('Sempre atenderam muito bem minhas solicita√ß√µes. Teste de preenchimento do campo mensagem', { delay: 0 })
    cy.get('@mensagem')
      .should('have.value', 'Sempre atenderam muito bem minhas solicita√ß√µes. Teste de preenchimento do campo mensagem')

    // ‚ú¶ Clicar no bot√£o "Enviar" ‚ú¶ //
    cy.get('button[type="submit"]')
      .as('botaoEnviar')
      .should('be.visible')
    cy.contains('button', 'Enviar').click() // Outra forma de clicar no bot√£o Enviar usando cy.contains()

    // ‚ú¶ Verificar se a mensagem de erro √© exibida ‚ú¶ //
    cy.get('.error')
      .should('be.visible')
      .and('contain', 'Valide os campos obrigat√≥rios!')

  })

  //‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste sem preencher campo obrigat√≥rio - E-mail ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //
  it('N√£o preencher campo e-mail - Campo Obrigat√≥rio', () => {

    // ‚ú¶ Preencher o campo "Nome" ‚ú¶ //
    cy.get('input[name="firstName"]')
      .as('nome')
      .should('be.visible')
      .type('Michelle')
    cy.get('@nome')
      .should('have.value', 'Michelle')

    // ‚ú¶ Preencher o campo sobrenome ‚ú¶ //
    cy.get('input[name="lastName"]')
      .as('sobrenome')
      .should('be.visible')
      .type('Monteiro')
    cy.get('@sobrenome')
      .should('have.value', 'Monteiro')

    // ‚ú¶ Preencher o campo email para depois apagar ‚ú¶ //
    cy.get('#email')
      .as('email')
      .should('be.visible')
      .type('michelle.teste@com')
    cy.get('@email')
      .should('have.value', 'michelle.teste@com')

    // ‚ú¶ Apagar o conte√∫do do campo e-mail ‚ú¶ // 
    cy.get('#email')
      .clear()
    cy.get('@email')
      .should('have.value', '')

    // ‚ú¶ Selecionar o produto "Blog" da lista de sele√ß√£o ‚ú¶ //
    cy.get('#product')
      .select('blog')
      .should('have.value', 'blog')
    cy.get('input[type="radio"][value="elogio"]')
      .check()
      .should('be.checked')

    // ‚ú¶ "Checkar" o meio de contato "E-mail" ‚ú¶ //
    cy.get('input[type="checkbox"][value="email"]')
      .check()
      .should('be.checked')
      .and('have.value', 'email')

    // ‚ú¶ Preencher o campo "Mensagem" ‚ú¶ //
    cy.get('textarea[name="open-text-area"]')
      .as('mensagem')
      .should('be.visible')
      .type('Sempre atenderam muito bem minhas solicita√ß√µes. Teste de preenchimento do campo mensagem', { delay: 0 })
    cy.get('@mensagem')
      .should('have.value', 'Sempre atenderam muito bem minhas solicita√ß√µes. Teste de preenchimento do campo mensagem')

    // ‚ú¶ Clicar no bot√£o "Enviar" ‚ú¶ //
    cy.get('button[type="submit"]')
      .as('botaoEnviar')
      .should('be.visible')
    cy.contains('button', 'Enviar').click() // Outra forma de clicar no bot√£o Enviar usando cy.contains() 

    // ‚ú¶ Verificar se a mensagem de erro √© exibida ‚ú¶ //
    cy.get('.error')
      .should('be.visible')
      .and('contain', 'Valide os campos obrigat√≥rios!')

  })


  //‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste n√£o preencher a mensagem - Campo Obrigat√≥rio ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è // 
  it('N√£o preencher campo mensagem - Campo Obrigat√≥rio', () => {

    // ‚ú¶ Preencher o campo "Nome" ‚ú¶ //
    cy.get('input[name="firstName"]')
      .as('nome')
      .should('be.visible')
      .type('Michelle')
    cy.get('@nome')
      .should('have.value', 'Michelle')

    // ‚ú¶ Preencher o campo sobrenome ‚ú¶ //
    cy.get('input[name="lastName"]')
      .as('sobrenome')
      .should('be.visible')
      .type('Monteiro')
    cy.get('@sobrenome')
      .should('have.value', 'Monteiro')

    // ‚ú¶ Preencher o campo e-mail ‚ú¶ //
    cy.get('#email')
      .as('email')
      .should('be.visible')
      .type('michelle.teste@com')
    cy.get('@email')
      .should('have.value', 'michelle.teste@com')

    // ‚ú¶ Selecionar o produto "Blog" da lista de sele√ß√£o ‚ú¶ //
    cy.get('#product')
      .select('blog')
      .should('have.value', 'blog')
    cy.get('input[type="radio"][value="elogio"]')
      .check()
      .should('be.checked')

    // ‚ú¶ "Checkar" o meio de contato "E-mail" ‚ú¶ //
    cy.get('input[type="checkbox"][value="email"]')
      .check()
      .should('be.checked')
      .and('have.value', 'email')

    // ‚ú¶ Preencher o campo "Mensagem" para depois apagar ‚ú¶ //
    cy.get('textarea[name="open-text-area"]')
      .as('mensagem')
      .should('be.visible')
      .type('Sempre atenderam muito bem minhas solicita√ß√µes. Teste de preenchimento do campo mensagem', { delay: 0 })
    cy.get('@mensagem')
      .should('have.value', 'Sempre atenderam muito bem minhas solicita√ß√µes. Teste de preenchimento do campo mensagem')

    // ‚ú¶ Apagar o conte√∫do do campo mensagem ‚ú¶ // 
    cy.get('textarea[name="open-text-area"]')
      .clear()
    cy.get('@mensagem')
      .should('have.value', '')

    // ‚ú¶ Clicar no bot√£o "Enviar" ‚ú¶ //
    cy.get('button[type="submit"]')
      .as('botaoEnviar')
      .should('be.visible')
    cy.contains('button', 'Enviar').click() // Outra forma de clicar no bot√£o Enviar usando cy.contains()

    // ‚ú¶ Verificar se a mensagem de erro √© exibida ‚ú¶ //
    cy.get('.error')
      .should('be.visible')
      .and('contain', 'Valide os campos obrigat√≥rios!')

  })

  //‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste enviando o formul√°rio com comando customizado ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //
  it('Envia o formul√°rio usando um comando customizado', () => { // Comando customizado criado em cypress/support/commands.js

    // ‚ú¶ Usar o comando customizado para preencher os campos obrigat√≥rios e enviar o formul√°rio ‚ú¶ //
    //üí° Nota: O comando customizado "fillMandatoryFieldsAndSubmit" preenche os campos obrigat√≥rios e envia o formul√°rio. Ele pode ser reutilizado em v√°rios testes para evitar repeti√ß√£o de c√≥digo e garantir que os campos obrigat√≥rios sejam sempre preenchidos corretamente antes do envio.
    //üí° Nota: Se desejar personalizar os dados enviados, voc√™ pode modificar o comando para aceitar par√¢metros ou criar varia√ß√µes conforme necess√°rio.
    // Exemplo de como passar dados personalizados (opcional): 
    // const data = {
    //   firstName: 'Maria Michelle',
    //   lastName: 'Monteiro',
    //   email: 'michelle@teste.com',
    //   message: 'Muito Obrigada pelo atendimento!'
    // }
    cy.fillMandatoryFieldsAndSubmit() // data √© um objeto com os dados a serem preenchidos no formul√°rio de acordo a vari√°vel criada acima.

    // ‚ú¶ Verificar se a mensagem de sucesso √© exibida ‚ú¶ //
    cy.get('.success')
      .should('be.visible')

  })

  // ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste de Select - Selecionar produtos pelo valor ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('Selecionar produtos pelo valor', () => {

    // ‚ú¶ Selecionar o produto "YouTube" da lista de sele√ß√£o pelo valor ‚ú¶ //
    cy.get('#product')
      .select('youtube') // Seleciona o produto pelo valor do atributo 'value' na tag <option>
      .should('have.value', 'youtube') // Verifica se o valor selecionado √© 'youtube'

    // ‚ú¶ Selecionar o produto "Mentoria" da lista de sele√ß√£o pelo valor ‚ú¶ //
    cy.get('#product')
      .select('mentoria') // Seleciona o produto pelo valor do atributo 'value' na tag <option>
      .should('have.value', 'mentoria') // Verifica se o valor selecionado √© 'mentoria'

    // ‚ú¶ Selecionar o produto "Blog" da lista de sele√ß√£o pelo valor ‚ú¶ //
    cy.get('#product')
      .select('blog') // Seleciona o produto pelo valor do atributo 'value' na tag <option>
      .should('have.value', 'blog') // Verifica se o valor selecionado √© 'blog'

    // ‚ú¶ Selecionar o produto "Curso" da lista de sele√ß√£o pelo valor ‚ú¶ //
    cy.get('#product')
      .select('cursos') // Seleciona o produto pelo valor do atributo 'value' na tag <option>
      .should('have.value', 'cursos') // Verifica se o valor selecionado √© 'curso'
  })

  // ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste de Select - Selecionar produtos pelo texto ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('Selecionar produtos pelo texto', () => {

    // ‚ú¶ Selecionar o produto "YouTube" da lista de sele√ß√£o pelo texto vis√≠vel ‚ú¶ //
    cy.get('#product')
      .select('YouTube') // Seleciona o produto pelo texto vis√≠vel na tag <option>
      .should('have.value', 'youtube') // Verifica se o valor selecionado √© 'youtube'

    // ‚ú¶ Selecionar o produto "Mentoria" da lista de sele√ß√£o pelo texto vis√≠vel ‚ú¶ //
    cy.get('#product')
      .select('Mentoria') // Seleciona o produto pelo texto vis√≠vel na tag <option>
      .should('have.value', 'mentoria') // Verifica se o valor selecionado √© 'mentoria'

    // ‚ú¶ Selecionar o produto "Blog" da lista de sele√ß√£o pelo texto vis√≠vel ‚ú¶ //
    cy.get('#product')
      .select('Blog') // Seleciona o produto pelo texto vis√≠vel na tag <option>
      .should('have.value', 'blog') // Verifica se o valor selecionado √© 'blog'

    // ‚ú¶ Selecionar o produto "Curso" da lista de sele√ß√£o pelo texto vis√≠vel ‚ú¶ //
    cy.get('#product')
      .select('Cursos') // Seleciona o produto pelo texto vis√≠vel na tag <option>
      .should('have.value', 'cursos') // Verifica se o valor selecionado √© 'curso'
  })

  // ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste de Select - Selecionar produtos pelo √≠ndice ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('Selecionar produtos pelo √≠ndice', () => { //√çndice come√ßa em 0 (zero) - YouTube = 0, Mentoria = 1, Blog = 2, Curso = 3 

    // ‚ú¶ Selecionar o produto "YouTube" da lista de sele√ß√£o pelo √≠ndice ‚ú¶ //
    cy.get('#product')
      .select(1) // Seleciona o produto pelo √≠ndice (posi√ß√£o) na lista de op√ß√µes (blog est√° na posi√ß√£o 1 porque, o √≠ndice come√ßa em 0 e o primeiro item √© "Selecione um produto" que se encontra desabilitado)
      .should('have.value', 'blog') // Verifica se o valor selecionado √© 'blog'

    // ‚ú¶ Selecionar o produto "Mentoria" da lista de sele√ß√£o pelo √≠ndice ‚ú¶ //
    cy.get('#product')
      .select(2) // Seleciona o produto pelo √≠ndice (posi√ß√£o) na lista de op√ß√µes
      .should('have.value', 'cursos') // Verifica se o valor selecionado √© 'cursos'

    // ‚ú¶ Selecionar o produto "Blog" da lista de sele√ß√£o pelo √≠ndice ‚ú¶ //
    cy.get('#product')
      .select(3) // Seleciona o produto pelo √≠ndice (posi√ß√£o) na lista de op√ß√µes
      .should('have.value', 'mentoria') // Verifica se o valor selecionado √© 'mentoria'

    // ‚ú¶ Selecionar o produto "Curso" da lista de sele√ß√£o pelo √≠ndice ‚ú¶ //
    cy.get('#product')
      .select(4) // Seleciona o produto pelo √≠ndice (posi√ß√£o) na lista de op√ß√µes
      .should('have.value', 'youtube') // Verifica se o valor selecionado √© 'youtube'
  })

  // ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Marca cada tipo de atendimento ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //
  it('Marca cada tipo de atendimento', () => {

    // ‚ú¶ Selecionar cada tipo de atendimento (radio buttons) e verificar se est√£o marcados ‚ú¶ //

    cy.get('input[type="radio"]') // Seleciona todos os elementos de input do tipo radio
      .should('have.length', 3) // Verifica se existem exatamente 3 radio buttons na p√°gina
      .each(($radio) => { // Itera sobre cada radio button encontrado //Posso colocar qualquer nome no lugar de $radio, como por exemplo: $elemento, $el, $item, etc. Qualqwer nome que comece com $ indica que √© um elemento jQuery. Posso colocar qualquer nome que eu quiser, desde que comece com $. E se n√£o come√ßar com $, o Cypress vai entender que √© uma vari√°vel comum do JavaScript. Exemplo de vari√°vel comum do JavaScript: elemento, el, item, etc. Exemplo de vari√°vel jQuery: $elemento, $el, $item, etc.
        cy.wrap($radio) // Envolve o elemento jQuery para usar comandos Cypress
          .check() // Marca o radio button atual
          .should('be.checked') // Verifica se o radio button atual est√° marcado
      })
  })

  // ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Marca ambos os checkboxes, depois desmarca o √∫ltimo ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('Marca ambos os checkboxes, depois desmarca o √∫ltimo', () => {

    // ‚ú¶ Selecionar ambos os checkboxes e verificar se est√£o marcados ‚ú¶ //

    cy.get('input[type="checkbox"]') // Seleciona todos os elementos de input do tipo checkbox
      .should('have.length', 2) // Verifica se existem exatamente 3 checkboxes na p√°gina
      .as('checkboxes') // D√° um alias para o conjunto de checkboxes para reutiliza√ß√£o

    cy.get('@checkboxes') // Usa o alias para selecionar os checkboxes
      .check() // Marca todos os checkboxes
      .should('be.checked') // Verifica se todos os checkboxes est√£o marcados

    // ‚ú¶ Desmarcar o √∫ltimo checkbox e verificar se est√° desmarcado ‚ú¶ //

    cy.get('@checkboxes') // Usa o alias para selecionar os checkboxes
      .last() // Seleciona o √∫ltimo checkbox do conjunto
      .uncheck() // Desmarca o √∫ltimo checkbox
      .should('not.be.checked') // Verifica se o √∫ltimo checkbox est√° desmarcado

  })

  // ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è  Marca ambos checkboxes, depois demarca o √∫ltimo ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //
  it('Seleciona ambos checkboxes, depois desmarca o √∫ltimo', () => {

    // ‚ú¶ Selecionar ambos os checkboxes e verificar se est√£o marcados ‚ú¶ //

    cy.get('input[type="checkbox"]') // Seleciona todos os elementos de input do tipo checkbox
      .should('have.length', 2) // Verifica se existem exatamente 3 checkboxes na p√°gina
      .as('checkboxes') // D√° um alias para o conjunto de checkboxes para reutiliza√ß√£o

    cy.get('@checkboxes') // Usa o alias para selecionar os checkboxes
      .check() // Marca todos os checkboxes
      .should('be.checked') // Verifica se todos os checkboxes est√£o marcados

    // ‚ú¶ Desmarcar o √∫ltimo checkbox e verificar se est√° desmarcado ‚ú¶ //

    cy.get('@checkboxes') // Usa o alias para selecionar os checkboxes
      .last() // Seleciona o √∫ltimo checkbox do conjunto
      .uncheck() // Desmarca o √∫ltimo checkbox
      .should('not.be.checked') // Verifica se o √∫ltimo checkbox est√° desmarcado  
  })

  // ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Teste de upload de arquivo - Sele√ß√£o pelo caminho ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('Faz upload de um arquivo da pasta fixtures usando o comando selectFile', () => {

    // ‚ú¶ Fazer upload de um arquivo da pasta fixtures usando o comando selectFile e verificar se o arquivo foi carregado corretamente ‚ú¶ //

    cy.get('input[type="file"]') // Seleciona o elemento de input do tipo file (campo de upload)
      .should('exist') // Verifica se o campo de upload existe na p√°gina
      .selectFile('cypress/fixtures/example.json') // Usa o comando selectFile para selecionar o arquivo example.json da pasta fixtures
      .then(input => { // Usa uma fun√ß√£o then para acessar o elemento input ap√≥s o upload
        expect(input[0].files[0].name).to.equal('example.json') // Verifica se o nome do arquivo carregado √© 'example.json'
      })
  })

  // ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Seleciona um arquivo simulando um drag-and-drop ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('Seleciona um arquivo simulando um drag-and-drop', () => {

    // ‚ú¶ Fazer upload de um arquivo simulando um drag-and-drop e verificar se o arquivo foi carregado corretamente ‚ú¶ // 
    cy.get('input[type="file"]') // Seleciona o elemento de input do tipo file (campo de upload)
      .should('exist') // Verifica se o campo de upload existe na p√°gina
      .selectFile('cypress/fixtures/example.json', { action: 'drag-drop' }) // Usa o comando selectFile com a op√ß√£o action: 'drag-drop' para simular um drag-and-drop do arquivo example.json da pasta fixtures
      .then(input => { // Usa uma fun√ß√£o then para acessar o elemento input ap√≥s o upload
        expect(input[0].files[0].name).to.equal('example.json') // Verifica se o nome do arquivo carregado √© 'example.json'
      })
  })

  // ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Seleciona um arquivo utilizando uma fixture para a qual foi dada um alias ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('Seleciona um arquivo utilizando uma fixture para a qual foi dada um alias', () => {

    // ‚ú¶ Fazer upload de um arquivo utilizando uma fixture para a qual foi dada um alias e verificar se o arquivo foi carregado corretamente ‚ú¶ //

    cy.fixture('example.json').as('sampleFile') // Usa o comando fixture para carregar o arquivo example.json da pasta fixtures e d√° um alias 'sampleFile' para ele

    cy.get('input[type="file"]') // Seleciona o elemento de input do tipo file (campo de upload)
      .should('exist') // Verifica se o campo de upload existe na p√°gina
      .selectFile('@sampleFile') // Usa o comando selectFile com o alias '@sampleFile' para selecionar o arquivo carregado anteriormente
      .then(input => { // Usa uma fun√ß√£o then para acessar o elemento input ap√≥s o upload
        expect(input[0].files[0].name).to.equal('example.json') // Verifica se o nome do arquivo carregado √© 'example.json'
      })
  })

  // ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Verifica que a pol√≠tica de privacidade abre em outra aba sem a necessidade de um clique ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('Verifica que a pol√≠tica de privacidade abre em outra aba sem a necessidade de um clique', () => {

    // ‚ú¶ Verificar se o link da pol√≠tica de privacidade abre em outra aba ‚ú¶ //

    cy.get('#privacy a') // Seleciona o link da pol√≠tica de privacidade dentro do elemento com id 'privacy'
      .should('have.attr', 'target', '_blank') // Verifica se o atributo 'target' do link √© igual a '_blank', indicando que ele abre em outra aba

      // // Outra forma de fazer a verifica√ß√£o:
      // cy.contains('a', 'Pol√≠tica de Privacidade') // Seleciona o link da pol√≠tica de privacidade pelo texto vis√≠vel
      // .should('have.attr', 'href', 'privacy.html') // Verifica se o atributo 'href' do link √© igual a 'privacy.html'
      // .and('have.attr', 'target', '_blank') // Verifica se o atributo 'target' do link √© igual a '_blank' --> o .and() √© usado para encadear m√∫ltiplas asser√ß√µes no mesmo elemento, garantindo que todas as condi√ß√µes sejam verificadas sequencialmente. Como se eu estivesse dizendo "e tamb√©m deve ter o atributo 'target' igual a '_blank'".
    
  })

  // ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è Acessa a p√°gina da pol√≠tica de privacidade removendo o target e ent√£o clicando no link ‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è‚ô•Ô∏è //

  it('Acessa a p√°gina da pol√≠tica de privacidade removendo o target e ent√£o clicando no link', () => {

    // ‚ú¶ Remover o atributo target do link da pol√≠tica de privacidade e clicar nele para abrir na mesma aba ‚ú¶ //

    cy.get('#privacy a') // Seleciona o link da pol√≠tica de privacidade dentro do elemento com id 'privacy'
      .invoke('removeAttr', 'target') // Remove o atributo 'target' do link para que ele abra na mesma aba
      .click() // Clica no link para navegar para a p√°gina da pol√≠tica de privacidade

    // // ‚ú¶ Verificar se o conte√∫do da p√°gina da pol√≠tica de privacidade est√° vis√≠vel ‚ú¶ //

    cy.contains('Talking About Testing').should('be.visible') // Verifica se o texto 'Talking About Testing' est√° vis√≠vel na p√°gina, indicando que a navega√ß√£o foi bem-sucedida
    
    // Outra forma de fazer a verifica√ß√£o:
    // cy.contains('a', 'Pol√≠tica de Privacidade') // Seleciona o link da pol√≠tica de privacidade pelo texto vis√≠vel
    // .invoke('removeAttr', 'target') // Remove o atributo 'target' do link para que ele abra na mesma aba
    // .click() // Clica no link para navegar para a p√°gina da pol√≠tica de privacidade
    // cy.contains('h1', 'CAC TAT - Pol√≠tica de Privacidade').should('be.visible')// Verifica se o t√≠tulo da p√°gina da pol√≠tica de privacidade est√° vis√≠vel, indicando que a navega√ß√£o foi bem-sucedida

  })
  
  

})


